NAME ISurface
INHERITS IAppSystem

VMETHODS

runFrame: fn () void
getEmbeddedPanel: fn () sdk.Vpanel
setEmbeddedPanel: fn (panel: sdk.Vpanel) void
pushMakeCurrent: fn (panel: sdk.Vpanel, useInsets: bool) void
popMakeCurrent: fn (panel: sdk.Vpanel) void
drawSetColorRaw: fn (r: c_int, g: c_int, b: c_int, a: c_int) void
drawSetColor: fn (color: sdk.Color) void
drawFilledRect: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int) void
drawFilledRectArray: fn (rects: [*]sdk.IntRect, num_rects: c_int) void
drawOutlinedRect: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int) void
drawLine: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int) void
drawPolyLine: fn (px: [*]c_int, py: [*]c_int, num_points: c_int) void
drawSetApparentDepth: fn (depth: f32) void
drawClearApparentDepth: fn () void
drawSetTextFont: fn (font: sdk.HFont) void
drawSetTextColorRaw: fn (r: c_int, g: c_int, b: c_int, a: c_int) void
drawSetTextColor: fn (color: sdk.Color) void
drawSetTextPos: fn (x: c_int, y: c_int) void
drawGetTextPos: fn (x: *c_int, y: *c_int) void
drawPrintText: fn (text: [*]const sdk.wchar, text_len: c_int, draw_type: sdk.FontDrawType) void
drawUnicodeChar: fn (ch: sdk.wchar, draw_type: sdk.FontDrawType) void

drawFlushText: fn () void
createHtmlWindow: fn (events: *sdk.IHTMLEvents, context: sdk.Vpanel) *sdk.IHTML
paintHtmlWindow: fn (html: *sdk.IHTML) void
deleteHtmlWindow: fn (html: *sdk.IHTML) void

drawGetTextureId: fn (filename: [*:0]const u8) c_int
drawGetTextureFile: fn (id: c_int, filename: [*:0]u8, maxlen: c_int) bool
drawSetTextureFile: fn (id: c_int, filename: [*:0]const u8, maxlen: c_int) void
drawSetTextureRgba: fn (id: c_int, rgba: [*]const u8, wide: c_int, tall: c_int) bool
drawSetTexture: fn (id: c_int) void
drawGetTextureSize: fn (id: c_int, wide: *c_int, tall: *c_int) void
drawTexturedRect: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int) void
isTextureIdValid: fn (id: c_int) bool

createNewTextureId: fn (procedural: bool) c_int

getScreenSize: fn (wide: *c_int, tall: *c_int) c_int
setAsTopMost: fn (panel: sdk.Vpanel, state: bool) void
bringToFront: fn (panel: sdk.Vpanel) void
setForegroundWindow: fn (panel: sdk.Vpanel) void
setPanelVisible: fn (panel: sdk.Vpanel, state: bool) void
setMinimized: fn (panel: sdk.Vpanel, state: bool) void
isMinimized: fn (panel: sdk.Vpanel) bool
flashWindow: fn (panel: sdk.Vpanel, state: bool) void
setTitle: fn (panel: sdk.Vpanel, title: [*:0]const sdk.wchar) void
setAsToolbar: fn (panel: sdk.Vpanel, state: bool) void

createPopup: fn (panel: sdk.Vpanel, minimized: bool, show_taskbar_icon: bool, disabled: bool, mouse_input: bool, kb_input: bool) void
swapBuffers: fn (panel: sdk.Vpanel) void
invalidate: fn (panel: sdk.Vpanel) void
setCursor: fn (cursor: sdk.HCursor) void
isCursorVisible: fn () bool
applyChanges: fn () void
isWithin: fn (x: c_int, y: c_int) bool
hasFocus: fn () bool

supportsFeature: fn (feature: sdk.SurfaceFeature) bool

restrictPaintToSinglePanel: fn (panel: sdk.Vpanel, force_allow_non_modal_surface: bool) void

setModalPanel: fn (panel: sdk.Vpanel) void
getModalPanel: fn () sdk.Vpanel

unlockCursor: fn () void
lockCursor: fn () void
setTranslateExtendedKeys: fn (state: bool) void
getTopmostPopup: fn () sdk.Vpanel

setTopLevelFocus: fn (panel: sdk.Vpanel) void

createFont: fn () sdk.HFont

setFontGlyphSet: fn (font: sdk.HFont, windows_font_name: [*:0]const u8, tall: c_int, weight: c_int, blur: c_int, scanlines: c_int, flags: c_int, range_min: c_int, range_max: c_int) bool

addCustomFontFile: fn (font_filename: [*:0]const u8) bool

getFontTall: fn (font: sdk.HFont) c_int
getFontAscent: fn (font: sdk.HFont, ch: sdk.wchar) c_int
isFontAdditive: fn (font: sdk.HFont) bool
getCharAbcWide: fn (font: sdk.HFont, ch: c_int, a: *c_int, b: *c_int, c: *c_int) void
getCharacterWidth: fn (font: sdk.HFont, ch: c_int) c_int
getTextSize: fn (font: sdk.HFont, text: [*:0]const sdk.wchar, wide: *c_int, tall: *c_int) void

getNotifyPanel: fn () sdk.Vpanel
setNotifyIcon: fn (ctx: sdk.Vpanel, icon: sdk.HTexture, panel_to_receive_message: sdk.Vpanel, text: [*:0]const u8) void

playSound: fn (filename: [*:0]const u8) void

getPopupCount: fn () c_int
getPopup: fn (idx: c_int) sdk.Vpanel
shouldPaintChildPanel: fn (child: sdk.Vpanel) bool
recreateContext: fn (panel: sdk.Vpanel) bool
addPanel: fn (panel: sdk.Vpanel) void
releasePanel: fn (panel: sdk.Vpanel) void
movePopupToFront: fn (panel: sdk.Vpanel) void
movePopupToBack: fn (panel: sdk.Vpanel) void

solveTraverse: fn (panel: sdk.Vpanel, force_apply_scheme_settings: bool) void
paintTraverse: fn (panel: sdk.Vpanel) void

enableMouseCapture: fn (panel: sdk.Vpanel, state: bool) void

getWorkspaceBounds: fn (x: *c_int, y: *c_int, wide: *c_int, tall: *c_int) void

getAbsoluteWindowBounds: fn (x: *c_int, y: *c_int, wide: *c_int, tall: *c_int) void

getProportionalBase: fn (width: *c_int, height: *c_int) void

calculateMouseVisible: fn () void
needKbInput: fn () bool

hasCursorPosFunctions: fn () bool
surfaceGetCursorPos: fn (x: *c_int, y: *c_int) void
surfaceSetCursorPos: fn (x: c_int, y: c_int) void

drawTexturedLine: fn (a: *const sdk.Vertex, b: *const sdk.Vertex) void
drawOutlinedCircle: fn (x: c_int, y: c_int, radius: c_int, segments: c_int) void
drawTexturedPolyLine: fn (p: *const sdk.Vertex, n: c_int) void
drawTexturedSubRect: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int, texs0: f32, text0: f32, texs1: f32, text1: f32) void
drawTexturedPolygon: fn (n: c_int, vertices: [*]sdk.Vertex, clip_vertices: bool) void
getTitle: fn (panel: sdk.Vpanel) [*:0]const sdk.wchar
isCursorLocked: fn () bool
setWorkspaceInsets: fn (left: c_int, top: c_int, right: c_int, bottom: c_int) void

drawWordBubble: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int, border_thickness: c_int, background: sdk.Color, border: sdk.Color, pointer: bool, pointer_x: c_int, pointer_y: c_int, pointer_base_thickness: c_int) void

drawGetUnicodeCharRenderInfo: fn (ch: sdk.wchar, info: *sdk.FontCharRenderInfo) bool
drawRenderCharFromInfo: fn (info: *const sdk.FontCharRenderInfo) void

drawSetAlphaMultiplier: fn (alpha: f32) void
drawGetAlphaMultiplier: fn () f32

setAllowHtmlJavascript: fn (state: bool) void

onScreenSizeChanged: fn (old_width: c_int, old_height: c_int) void

createCursorFromFile: fn (file: [*:0]const u8, path_id: [*:0]const u8) sdk.HCursor

drawGetTextureMatInfoFactory: fn (id: c_int) *sdk.IVguiMatInfo

paintTraverseEx: fn (panel: sdk.Vpanel, paint_popups: bool) void

getZPos: fn () f32

setPanelForInput: fn (panel: sdk.Vpanel) void
drawFilledRectFastFade: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int, fade_start_pt: c_int, fade_end_pt: c_int, alpha0: c_uint, alpha1: c_uint, horizontal: bool) void
drawFilledRectFade: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int, alpha0: c_uint, alpha1: c_uint, horizontal: bool) void
drawSetTextureRgbaEx: fn (id: c_int, rgba: *[4]u8, wide: c_int, tall: c_int, image_format: sdk.ImageFormat) void
drawSetTextScale: fn (sx: f32, sy: f32) void
setBitmapFontGlyphSet: fn (font: sdk.HFont, windows_font_name: [*:0]const u8, scalex: f32, scaley: f32, flags: c_int) void
addBitmapFontFile: fn (font_filename: [*:0]const u8) bool
setBitmapFontName: fn (name: [*:0]const u8, font_filename: [*:0]const u8) void
getBitmapFontName: fn (name: [*:0]const u8) [*:0]const u8
clearTemporaryFontCache: fn () void

getIconImageForFullPath: fn (full_path: [*:0]const u8) *sdk.IImage
drawUnicodeString: fn (string: [*:0]const sdk.wchar, draw_type: sdk.FontDrawType) void
precacheFontCharacters: fn (font: sdk.HFont, characters: [*:0]const sdk.wchar) void

getFontName: fn (font: sdk.HFont) [*:0]const u8

forceScreenSizeOverride: fn (state: bool, wide: c_int, tall: c_int) bool
forceScreenPosOffset: fn (state: bool, x: c_int, y: c_int) bool
offsetAbsPos: fn (x: *c_int, y: *c_int) void

setAbsPosForContext: fn (id: c_int, x: c_int, y: c_int) void
getAbsPosForContext: fn (id: c_int, x: *c_int, y: *c_int) void

resetFontCaches: fn () void

isScreenSizeOverrideActive: fn () bool
isScreenPosOverrideActive: fn () bool

destroyTextureId: fn (id: c_int) void

getTextureNumFrames: fn (id: c_int) c_int
drawSetTextureFrame: fn (id: c_int, frame: c_int, frame_cache: *c_uint) void

getClipRect: fn (x0: *c_int, y0: *c_int, x1: *c_int, y1: *c_int) void
setClipRect: fn (x0: c_int, y0: c_int, x1: c_int, y1: c_int) void

drawTexturedRectEx: fn (draw_params: sdk.DrawTexturedRectParms) void

getKernedCharWidth: fn (font: sdk.HFont, ch: sdk.wchar, before: sdk.wchar, after: sdk.wchar, wide: *f32, a: *f32, c: *f32) void

drawUpdateRegionTextureRgba: fn (texture_id: c_int, x: c_int, y: c_int, data: [*]const u8, wide: c_int, tall: c_int, image_format: sdk.ImageFormat) void
bhtmlWindowNeedsPaint: fn (html: *sdk.IHTML) bool

drawSetTextureRgbaLinear: fn (id: c_int, rgba: [*]const u8, wide: c_int, tall: c_int) void
